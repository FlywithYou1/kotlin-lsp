name: Build VSIX

on:
  push:
    branches:
      - main
      - 'copilot/**'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      push_to_release_branch:
        description: 'Push artifacts to release branch'
        required: false
        type: boolean
        default: false
  schedule:
    # Run daily at 00:00 Beijing Time (16:00 UTC, UTC+8)
    - cron: '0 16 * * *'

permissions:
  contents: write

jobs:
  build-vscode-extension:
    name: Build VSCode Extension
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: kotlin-vscode/package-lock.json

      - name: Install dependencies
        working-directory: kotlin-vscode
        run: npm ci

      - name: Compile extension
        working-directory: kotlin-vscode
        run: npm run compile

      - name: Create dummy LSP server archive
        run: |
          # Create a minimal dummy zip to satisfy the unpack-server script
          mkdir -p /tmp/dummy-lsp
          touch /tmp/dummy-lsp/.gitkeep
          cd /tmp && zip -r dummy-lsp.zip dummy-lsp/

      - name: Package extension
        working-directory: kotlin-vscode
        env:
          LSP_ZIP_PATH: /tmp/dummy-lsp.zip
        run: |
          # Install vsce globally
          npm install -g @vscode/vsce

          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")

          # Package the extension
          # The vscode:prepublish script will run which packages the extension and unpacks the dummy server
          vsce package "$VERSION" --out "../kotlin-vscode-${VERSION}.vsix"

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension
          path: kotlin-vscode-*.vsix
          retention-days: 30

      - name: List generated files
        run: |
          echo "Generated VSIX files:"
          ls -lh kotlin-vscode-*.vsix

      - name: Generate version tag for automated builds
        id: auto_version
        if: github.event_name == 'schedule' || github.event_name == 'push'
        run: |
          # Get base version from package.json
          BASE_VERSION=$(cd kotlin-vscode && node -p "require('./package.json').version")
          # Generate timestamp-based version for automated builds
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          AUTO_VERSION="${BASE_VERSION}-build.${TIMESTAMP}"
          echo "version=${AUTO_VERSION}" >> $GITHUB_OUTPUT
          echo "tag_name=v${AUTO_VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${AUTO_VERSION}"

      - name: Create GitHub Release for automated builds
        if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.auto_version.outputs.tag_name }}
          name: Automated Build ${{ steps.auto_version.outputs.tag_name }}
          body: |
            ## Automated Build - Kotlin LSP VSCode Extension

            **Version:** ${{ steps.auto_version.outputs.version }}
            **Build Time:** ${{ github.event.head_commit.timestamp || github.event.repository.updated_at }}
            **Commit:** ${{ github.sha }}

            ### Installation
            1. Download `kotlin-vscode-*.vsix` below
            2. Install via VS Code: Extensions → More Actions → Install from VSIX
            3. Ensure Java 17+ is installed
            4. Open a Kotlin Gradle project

            ### Note
            This is an automated pre-release build from the latest code.
            For stable releases, see [RELEASES.md](https://github.com/${{ github.repository }}/blob/main/RELEASES.md).

            ---
            **自动构建版本** - 这是最新代码的自动构建预发布版本。
          files: |
            kotlin-vscode-*.vsix
          prerelease: true
          draft: false
          make_latest: false

      - name: Push artifacts to release branch
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.push_to_release_branch)
        run: |
          # Verify VSIX files exist
          if ! ls kotlin-vscode-*.vsix 1> /dev/null 2>&1; then
            echo "Error: No VSIX files found to push to release branch"
            exit 1
          fi

          # Save VSIX files to a temporary location
          mkdir -p /tmp/vsix-artifacts
          cp kotlin-vscode-*.vsix /tmp/vsix-artifacts/

          # Configure git
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

          # Create or checkout release branch
          git fetch origin
          if git ls-remote --heads origin | grep -q 'refs/heads/release$'; then
            git checkout -b release origin/release
          else
            git checkout --orphan release
            git rm -rf .
          fi

          # Copy VSIX files from temporary location to release branch
          cp /tmp/vsix-artifacts/*.vsix .

          # Verify files were copied and commit
          if ! ls *.vsix 1> /dev/null 2>&1; then
            echo "Error: Failed to copy VSIX files to release branch"
            exit 1
          fi

          git add *.vsix
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          git commit -m "Build artifacts from ${TIMESTAMP} (${GITHUB_SHA:0:7})"

          # Push to release branch
          git push origin release
